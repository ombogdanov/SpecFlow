// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.5.0.0
//      SpecFlow Generator Version:3.5.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace FinalTaskSpecFlow.Feature
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CheckScoresOfTheCommands")]
    public partial class CheckScoresOfTheCommandsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "SpecFlowFeatureScore.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "feature", "CheckScoresOfTheCommands", "\tas a user\r\n\tI want to see list of the scores of the championship\r\n\tWhen I naviga" +
                    "te to Football Scores & Fixtures Page", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CheckScoresOfTheCommands")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        [NUnit.Framework.TestCaseAttribute("Scottish Championship", "OCT", "2021", "Arbroath", "4", "Dunfermline", "2", null)]
        [NUnit.Framework.TestCaseAttribute("Scottish Premiership", "JAN", "2021", "Celtic", "1", "St Mirren", "2", null)]
        [NUnit.Framework.TestCaseAttribute("womens Champions League", "AUG", "2021", "Arsenal Women", "3", "Slavia Prague Women", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Womens European Championship qualifying", "APR", "2021", "Northern Ireland", "2", "Ukraine", "0", null)]
        public virtual void CheckScoresOfTheCommands(string championship, string month, string year, string command1_Name, string command1_Score, string command2_Name, string command2_Score, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mytag"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("championship", championship);
            argumentsOfScenario.Add("month", month);
            argumentsOfScenario.Add("year", year);
            argumentsOfScenario.Add("command1_Name", command1_Name);
            argumentsOfScenario.Add("command1_Score", command1_Score);
            argumentsOfScenario.Add("command2_Name", command2_Name);
            argumentsOfScenario.Add("command2_Score", command2_Score);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CheckScoresOfTheCommands", null, tagsOfScenario, argumentsOfScenario);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
 testRunner.Given("User goes to bbc main page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
 testRunner.And("User goes to sport page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
 testRunner.And("User navigates to Football", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
 testRunner.And("User navigates to Scores & Fixtures page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
 testRunner.And(string.Format("User enter the name of the \"{0}\" in searchInput", championship), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
 testRunner.When(string.Format("User click on the date  \"{0}\" and \"{1}\"", month, year), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
 testRunner.Then(string.Format("User can see scores of the \"{0}\" - \"{1}\" and \"{2}\" - \"{3}\"", command1_Name, command1_Score, command2_Name, command2_Score), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CheckScoresOfTheCommandsEqualOnTheTeamScorePage")]
        [NUnit.Framework.TestCaseAttribute("Scottish Championship", "OCT", "2021", "Arbroath", "4", "Dunfermline", "2", null)]
        [NUnit.Framework.TestCaseAttribute("Scottish Premiership", "JAN", "2021", "Celtic", "1", "St Mirren", "2", null)]
        [NUnit.Framework.TestCaseAttribute("womens Champions League", "AUG", "2021", "Arsenal Women", "3", "Slavia Prague Women", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Womens European Championship qualifying", "APR", "2021", "Northern Ireland", "2", "Ukraine", "0", null)]
        public virtual void CheckScoresOfTheCommandsEqualOnTheTeamScorePage(string championship, string month, string year, string command1_Name, string command1_Score, string command2_Name, string command2_Score, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("championship", championship);
            argumentsOfScenario.Add("month", month);
            argumentsOfScenario.Add("year", year);
            argumentsOfScenario.Add("command1_Name", command1_Name);
            argumentsOfScenario.Add("command1_Score", command1_Score);
            argumentsOfScenario.Add("command2_Name", command2_Name);
            argumentsOfScenario.Add("command2_Score", command2_Score);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CheckScoresOfTheCommandsEqualOnTheTeamScorePage", null, tagsOfScenario, argumentsOfScenario);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 23
 testRunner.Given("User goes to bbc main page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 24
 testRunner.And("User goes to sport page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
 testRunner.And("User navigates to Football", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
 testRunner.And("User navigates to Scores & Fixtures page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
 testRunner.And(string.Format("User enter the name of the \"{0}\" in searchInput", championship), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
 testRunner.And(string.Format("User click on the date  \"{0}\" and \"{1}\"", month, year), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
 testRunner.When(string.Format("User click on the scores of the \"{0}\" - \"{1}\" and \"{2}\" - \"{3}\"", command1_Name, command1_Score, command2_Name, command2_Score), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 30
 testRunner.Then(string.Format("User can see the same scores of the \"{0}\" - \"{1}\" and \"{2}\" - \"{3}\"", command1_Name, command1_Score, command2_Name, command2_Score), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
